/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.best.newtify.api;

import sk.best.newtify.api.dto.DollarPriceDTO;
import sk.best.newtify.api.dto.Error;
import sk.best.newtify.api.dto.NameDayDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-15T12:39:10.103086600+02:00[Europe/Berlin]")
@Validated
@Tag(name = "Dollarprice", description = "Group of endpoints to handle operations with Dollar price")
public interface DollarpriceApi {

    /**
     * GET /v1/dollarprice
     * Endpoint to retrieve Dollar price
     *
     * @param price Refers to particular month where name day has to be checked (optional)
     * @return Returns Dollar price (status code 200)
     *         or BadRequest (status code 400)
     *         or AccessDenied (status code 403)
     *         or InternalServerError (status code 500)
     */
    @Operation(
            operationId = "retrieveDollarPrice",
            tags = { "dollarprice" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Returns dollar price", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DollarPriceDTO.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "BadRequest", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "AccessDenied", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "InternalServerError", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/v1/dollarprice",
            produces = { "application/json" }
    )
    ResponseEntity<DollarPriceDTO> retrieveDollarPrice(
            @Parameter(name = "price", description = "Dollar price") @Valid @RequestParam(value = "price", required = false) Integer price
    );

}

